2501. Longest Square Streak in an Array
Medium

892

29

Add to List

Share
You are given an integer array nums. A subsequence of nums is called a square streak if:

The length of the subsequence is at least 2, and
after sorting the subsequence, each element (except the first element) is the square of the previous number.
Return the length of the longest square streak in nums, or return -1 if there is no square streak.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,3,6,16,8,2]
Output: 3
Explanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].
- 4 = 2 * 2.
- 16 = 4 * 4.
Therefore, [4,16,2] is a square streak.
It can be shown that every subsequence of length 4 is not a square streak.
Example 2:

Input: nums = [2,3,5,6,7]
Output: -1
Explanation: There is no square streak in nums so return -1.
 

Constraints:

2 <= nums.length <= 105
2 <= nums[i] <= 105







 Solution : Optimal Solution
The problem can be solved by iterating through the array and checking for the longest sequence of perfect squares. We can use a set to store the numbers for quick lookup and iterate through each number, checking if its square root is also in the set. If it is, we continue the streak; otherwise, we reset the streak.
Code Complexity :
The time complexity is O(n) where n is the number of elements in the array, as we iterate through the array once. The space complexity is O(n) due to the additional space used by the set.
Code :

Java
import java.util.HashSet;
import java.util.Set;

class Solution {
    public int longestSquareStreak(int[] nums) {
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longestStreak = 0;
        for (int num : nums) {
            if (numSet.contains(num)) {
                int currentNum = num;
                int currentStreak = 0;

                while (numSet.contains(currentNum)) {
                    currentStreak++;
                    currentNum *= currentNum;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }
        return longestStreak;
    }
}.