2490. Circular Sentence
Easy

461

15

Add to List

Share
A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

For example, "Hello World", "HELLO", "hello world hello world" are all sentences.
Words consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.

A sentence is circular if:

The last character of a word is equal to the first character of the next word.
The last character of the last word is equal to the first character of the first word.
For example, "leetcode exercises sound delightful", "eetcode", "leetcode eats soul" are all circular sentences. However, "Leetcode is cool", "happy Leetcode", "Leetcode" and "I like Leetcode" are not circular sentences.

Given a string sentence, return true if it is circular. Otherwise, return false.

 

Example 1:

Input: sentence = "leetcode exercises sound delightful"
Output: true
Explanation: The words in sentence are ["leetcode", "exercises", "sound", "delightful"].
- leetcode's last character is equal to exercises's first character.
- exercises's last character is equal to sound's first character.
- sound's last character is equal to delightful's first character.
- delightful's last character is equal to leetcode's first character.
The sentence is circular.
Example 2:

Input: sentence = "eetcode"
Output: true
Explanation: The words in sentence are ["eetcode"].
- eetcode's last character is equal to eetcode's first character.
The sentence is circular.
Example 3:

Input: sentence = "Leetcode is cool"
Output: false
Explanation: The words in sentence are ["Leetcode", "is", "cool"].
- Leetcode's last character is not equal to is's first character.
The sentence is not circular.
 

Constraints:

1 <= sentence.length <= 500
sentence consist of only lowercase and uppercase English letters and spaces.
The words in sentence are separated by a single space.
There are no leading or trailing spaces.



class Solution {
    public boolean isCircularSentence(String sentence) {
        String[] words = sentence.split(" ");
        int n = words.length;
        for (int i = 0; i < n; i++) {
            String currentWord = words[i];
            String nextWord = words[(i + 1) % n];
            if (currentWord.charAt(currentWord.length() - 1) != nextWord.charAt(0)) {
                return false;
            }
        }
        return true;
    }
}

Solution : Simple Check for Circular Sentence
A circular sentence is one where the last character of each word matches the first character of the next word, and the last character of the last word matches the first character of the first word. We can solve this problem by splitting the sentence into words and checking these conditions.
Code Complexity :
The time complexity is O(n) where n is the number of characters in the sentence, as we need to iterate through the sentence to split it into words and check the conditions. The space complexity is O(m) where m is the number of words, due to the storage of the split words



// dry run

Here's a step-by-step dry run for the `isCircularSentence` method in the `Solution` class.

**Method Purpose**:
The `isCircularSentence` method checks if a given sentence is "circular." A sentence is circular if the last letter of each word matches the first letter of the next word, and the last letter of the last word matches the first letter of the first word.

**Example**:
Let's test this with an example input:

```java
sentence = "hello open network echo"
```

### Dry Run

1. **Initialize Variables**:
   - `words` = ["hello", "open", "network", "echo"]
   - `n` = 4 (the number of words in the sentence)

2. **Loop Through Each Word**:
   - The loop iterates over each word to check if the last character of the current word matches the first character of the next word.

   | Iteration | `currentWord` | `nextWord`      | Last Char of `currentWord` | First Char of `nextWord` | Comparison Result |
   |-----------|---------------|-----------------|----------------------------|--------------------------|--------------------|
   | 0         | "hello"       | "open"          | `'o'`                      | `'o'`                    | Match             |
   | 1         | "open"        | "network"       | `'n'`                      | `'n'`                    | Match             |
   | 2         | "network"     | "echo"          | `'k'`                      | `'e'`                    | **No Match**      |

   - In the third iteration, we find that the last character of `"network"` (`'k'`) does not match the first character of `"echo"` (`'e'`). 

3. **Return Result**:
   - Since a mismatch was found, the method immediately returns `false`.

### Conclusion
For this example, the method returns `false`, indicating that `"hello open network echo"` is not a circular sentence.